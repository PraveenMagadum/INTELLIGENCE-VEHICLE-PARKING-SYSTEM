//----------------------------------------------------------------------------------
#define BLYNK_TEMPLATE_ID "TMPL39zJwQwlU"
#define BLYNK_TEMPLATE_NAME "Parking System"
#define BLYNK_AUTH_TOKEN "NUPahAHnsSijFNvUigxMi3hmsgXtaXaL"
//----------------------------------------------------------------------------------
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "Praveen";  // type your WiFi name
char pass[] = "praveen2003";  // type your WiFi password
//----------------------------------------------------------------------------------

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <LiquidCrystal_I2C.h>
#include <ESP32Servo.h>

// IR sensor pins
#define IR_SENSOR_1 34
#define IR_SENSOR_2 35
#define IR_SENSOR_3 32
#define IR_SENSOR_4 27

// Servo motor pin
#define SERVO_PIN 25

// Blynk virtual pins for parking status
#define VIRTUAL_PIN_SLOT1 V0
#define VIRTUAL_PIN_SLOT2 V1
#define VIRTUAL_PIN_SLOT3 V2
#define VIRTUAL_PIN_SLOT4 V4

// Initialize LCD with I2C address 0x27, 16 characters, and 2 lines
LiquidCrystal_I2C lcd(0x3F, 16, 2);

// Initialize servo motor
Servo servo;

void setup() {
  // Debug console
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize Blynk
  Blynk.begin(auth, ssid, pass);

  // Initialize IR sensor pins
  pinMode(IR_SENSOR_1, INPUT);
  pinMode(IR_SENSOR_2, INPUT);
  pinMode(IR_SENSOR_3, INPUT);
  pinMode(IR_SENSOR_4, INPUT);

  // Initialize servo motor
  servo.attach(SERVO_PIN);
  servo.write(0); // Initial position (gate closed)

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Display initial status
  lcd.setCursor(0, 0);
  lcd.print("Parking System");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  Blynk.run();
  checkParkingStatus();
}

void checkParkingStatus() {
  int slot1 = digitalRead(IR_SENSOR_1);
  int slot2 = digitalRead(IR_SENSOR_2);
  int slot3 = digitalRead(IR_SENSOR_3);
  int slot4 = digitalRead(IR_SENSOR_4);

  // Debugging
  Serial.print("Slot 1: ");
  Serial.println(slot1 == LOW ? "Occupied" : "Available");
  Serial.print("Slot 2: ");
  Serial.println(slot2 == LOW ? "Occupied" : "Available");
  Serial.print("Slot 3: ");
  Serial.println(slot3 == LOW ? "Occupied" : "Available");
  Serial.print("Slot 4: ");
  Serial.println(slot4 == LOW ? "Occupied" : "Available");

  // Update Blynk and LCD status for each slot
  updateStatus(slot1, VIRTUAL_PIN_SLOT1, 0, "Slot 1");
  updateStatus(slot2, VIRTUAL_PIN_SLOT2, 1, "Slot 2");
  updateStatus(slot3, VIRTUAL_PIN_SLOT3, 3, "Slot 3");
  updateStatus(slot4, VIRTUAL_PIN_SLOT4, 4, "Slot 4");

  // Control servo motor based on parking availability
  if (slot1 == LOW && slot2 == LOW && slot3 == LOW && slot4 == LOW) {
    servo.write(0); // Close the gate
    lcd.setCursor(0, 1);
    lcd.print("Gate Closed       ");
    Serial.println("Gate Closed");
  } else {
    servo.write(90); // Open the gate
    lcd.setCursor(0, 1);
    lcd.print("Gate Open         ");
    Serial.println("Gate Open");
  }

  delay(1000); // Wait for a second before the next reading
}

void updateStatus(int slot, int virtualPin, int lcdRow, const char* slotName) {
  if (slot == LOW) {
    Blynk.virtualWrite(virtualPin, 1); // Occupied
    lcd.setCursor(0, lcdRow);
    lcd.print("Parking");
    lcd.print("Occupied  ");
  } else {
    Blynk.virtualWrite(virtualPin, 0); // Available
    lcd.setCursor(0, lcdRow);
    lcd.print(slotName);
    lcd.print(": Available");
  }
}
